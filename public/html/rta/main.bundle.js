(()=>{"use strict";var t={426:(t,e,n)=>{n.d(e,{RZ:()=>i,ei:()=>r,wb:()=>s});const i={FETCH_CONTENT:"Failed to get Content",FETCH_TITLE:"Untitled"},s={WEB:"content-signed-url",OFFLINE:"filename"},r="userId"},660:(t,e,n)=>{n.d(e,{Z:()=>r});var i=n(426);const s=t=>{const e=(new DOMParser).parseFromString(t,"application/xml");return{title:e.querySelector("title")?.textContent||i.RZ.FETCH_TITLE,content:e.querySelector("content")?.innerHTML||i.RZ.FETCH_CONTENT}},r={getContent:t=>(t=>new Promise(((e,n)=>{if(!window.rtaContentProvider)throw new Error("there is no rtaContentPrivider in window object!");const i=window.rtaContentProvider.getContent(t);i?e(i):n(new Error(`failed to get Content from ${t}`))})))(t).then(s).catch((t=>(console.error(t),{title:i.RZ.FETCH_TITLE,content:i.RZ.FETCH_CONTENT})))}}},e={};function n(i){var s=e[i];if(void 0!==s)return s.exports;var r=e[i]={exports:{}};return t[i](r,r.exports,n),r.exports}n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{const t=(t,e,n,i)=>{let s=n?n.call(i,t,e):void 0;if(void 0!==s)return!!s;if(Object.is(t,e))return!0;if("object"!=typeof t||!t||"object"!=typeof e||!e)return!1;const r=Object.keys(t),a=Object.keys(e);if(r.length!==a.length)return!1;const o=Object.prototype.hasOwnProperty.bind(e);for(let a=0;a<r.length;a++){const l=r[a];if(!o(l))return!1;const c=t[l],d=e[l];if(s=n?n.call(i,c,d,l):void 0,!1===s||void 0===s&&!Object.is(c,d))return!1}return!0},e=class{constructor(e){let{$target:n,initialState:i,className:s,id:r,display:a=!0}=e;this.$target=n,this.$children=new Map,this.$state={...i},this.$stateSubscribers={},this.$props=new Proxy({className:s,display:a,id:r},{set:(e,n,i)=>{const s={...e};return e[n]=i,t(s,e)||this.render(),!0}})}template(){return""}beforeRender(){}afterRender(){}render(){this.beforeRender();const t=this.template(),{display:e,className:n,id:i}=this.$props;i&&this.$node&&(this.$node.id=i),n&&this.$node&&(this.$node.className=n),!e&&this.$node&&this.$node.setAttribute("style","display: none;"),t&&this.$node&&(this.$children?.forEach((t=>t.unMount())),this.clearEvent(),this.$node.innerHTML=t,this.setEvent(),this.$children?.forEach((t=>t.mount()))),this.afterRender()}setState(e){const n=this.$state;this.$state={...this.$state,...e},t(n,this.$state)||(this.render(),Object.keys(this.$stateSubscribers).length&&this.setSubscribersState(this.$state,n))}subscribeState(t){let{targetState:e,subscriber:n,subscriberStateKey:i,compute:s}=t;this.$children.get(n)&&(this.$stateSubscribers[n]=[...this.$stateSubscribers[n]||[],{subscriberStateKey:i,targetState:e,compute:s}])}setSubscribersState(t,e){for(const[n,i]of Object.entries(this.$stateSubscribers)){const s=i.reduce(((n,i)=>{let{targetState:s,subscriberStateKey:r,compute:a}=i;return n[r]=a?.(t[s],e[s])||t[s],n}),{});this.$children.get(n)?.setState(s)}}beforeMount(){}mount(){return this.$children?.forEach((t=>t.mount())),this.render(),this.setEvent(),this.beforeMount(),this.$node&&this.$target.appendChild(this.$node),this.afterMount(),this}afterMount(){}beforeUnMount(){}unMount(){return this.beforeUnMount(),this.clearEvent(),this.$node&&this.$target.removeChild(this.$node),this}setEvent(){}clearEvent(){}},i=class extends e{constructor(t){let{$target:e}=t;super({$target:e,id:"close-button"}),this.$node=document.createElement("div"),this.$node.setAttribute("title","Close Reflowable Viewer"),this.handleClose=t=>{t.target instanceof Node&&(t.preventDefault(),window.close())}}template(){return'<svg tabIndex=0 aria-label="Close Reflowable Viewer" role="button" width="32" height="32" xmlns="http://www.w3.org/2000/svg"><g fill-rule="nonzero" fill="none"><path d="M16 2.5C8.544 2.5 2.5 8.544 2.5 16S8.544 29.5 16 29.5 29.5 23.456 29.5 16 23.456 2.5 16 2.5z" fill="#3C3C52"/><path d="M16 2c7.732 0 14 6.268 14 14s-6.268 14-14 14S2 23.732 2 16 8.268 2 16 2zm0 1.273C8.97 3.273 3.273 8.97 3.273 16c0 7.03 5.698 12.727 12.727 12.727 7.03 0 12.727-5.698 12.727-12.727C28.727 8.97 23.03 3.273 16 3.273zm-5.678 7.049c.43-.43 1.123-.43 1.552 0L16 14.448l4.126-4.125a1.096 1.096 0 1 1 1.552 1.552L17.552 16l4.126 4.125a1.096 1.096 0 1 1-1.552 1.552L16 17.553l-4.126 4.125a1.095 1.095 0 0 1-1.552 0 1.096 1.096 0 0 1 0-1.552L14.448 16l-4.126-4.126a1.096 1.096 0 0 1 0-1.552z" fill="#FFF"/></g></svg>'}setEvent(){this.$node?.addEventListener("click",this.handleClose),this.$node?.addEventListener("keydown",s)}clearEvent(){this.$node?.removeEventListener("click",this.handleClose),this.$node?.removeEventListener("keydown",s)}};function s(t){"Enter"===t.key&&(t.stopPropagation(),console.log("enter"),t.currentTarget?.click())}const r={text:"Test",fontSize:4,isMobile:!1,letterSpacing:1},a=class extends e{constructor(t){let{$target:e,initialState:n}=t;super({$target:e,initialState:{...r,...n},id:"reading-text"}),this.$node=document.createElement("div")}template(){const{text:t}=this.$state;return`\n      ${t}\n      <div id="additional-scroll-area" class="additional-scroll-area"/>\n    `}afterRender(){const{fontSize:t,isMobile:e,letterSpacing:n}=this.$state;this.$node?.classList.remove("size-1","size-2","size-3","size-4","size-5","size-6","size-7"),this.$node?.classList.remove("letter-spacing-1","letter-spacing-2","letter-spacing-3","letter-spacing-4","letter-spacing-5","letter-spacing-6","letter-spacing-7"),this.$node?.classList.remove("mobile"),this.$node?.classList.add(`letter-spacing-${n}`),this.$node?.classList.add(`size-${t}`),e&&this.$node?.classList.add("mobile")}},o=t=>e=>t.querySelector(e),l=()=>window.innerWidth<=700;function c(t,e,n,i){if(!i)return;const s=o(i)(`input#${t}`);if(!(s&&s instanceof HTMLInputElement))return;const r=(e-1)/(n-1)*100;var a;s.max=n.toString(10),s.value=e.toString(10),s.style.background=`\n  linear-gradient(to right, \n      rgba(0, 0, 0, 0) 0%, \n      rgba(0, 0, 0, 0) 4.333%,\n      #3cf 4.333%,\n      #3cf ${r}%,\n      #fff ${r}%,\n      #fff 95%, \n      rgba(0, 0, 0, 0) 95%,\n      rgba(0, 0, 0, 0) 100%\n  )\n  `,(a=i,t=>a.querySelectorAll(t))(`.${t}-container span`).forEach(((t,n)=>{const i=n+1;let s;s=i<e?"#00ccff":i===e?"#fff":"#f2f2f2",t.style.background=s}))}function d(t,e){document.body.style.backgroundColor="#f1f1f1",document.body.style.color="#222",t?.setAttribute("style","background-color: #3C3C52"),g("default"),e&&(e.classList.remove("sepia"),e.classList.remove("dark"))}function h(t,e){document.body.style.backgroundColor="#F7E9D4",document.body.style.color="#603D11",t?.setAttribute("style","background-color: #603D11"),g("sepia"),e&&(e.classList.remove("dark"),e.classList.add("sepia"))}function u(t,e){document.body.style.backgroundColor="#16191C",document.body.style.color="#fff",t?.setAttribute("style","background-color: #333333"),g("dark"),e&&(e.classList.remove("sepia"),e.classList.add("dark"))}function g(t){document.getElementById(`color-palette ${t}`)?.setAttribute("aria-checked","true"),["default","sepia","dark"].filter((e=>e!==t)).forEach((t=>{document.getElementById(`color-palette ${t}`)?.setAttribute("aria-checked","false")}))}const b=(t,e)=>{if(!t)return;const n=`${t}-setting`,i={...S(t),theme:e};localStorage.setItem(n,JSON.stringify(i))},S=t=>{const e=`${t}-setting`,n=localStorage.getItem(e);return n?JSON.parse(n):{}},f={fontSize:4,maxLevel:7,letterSpacing:2,userId:null},p=class extends e{isInit=!0;isLocalStorageLoaded=!1;constructor(t){let{$target:e,initialState:n,onFontSizeChange:i,onLetterSpacingChange:s}=t;super({$target:e,initialState:{...f,...n},id:"tools"}),this.$node=document.createElement("div"),this.onFontSizeChange=i,this.onLetterSpacingChange=s,this.handleFontSizeChange=t=>{if(!(t.target instanceof HTMLInputElement))return;const{fontSize:e,userId:n}=this.$state,s=+t.target.value;t.target.setAttribute("aria-valuetext",`Font Size ${s} Selected`),e!==s&&(i?.(s),((t,e)=>{if(!t)return;const n=`${t}-setting`,i={...S(t),fontSize:e};localStorage.setItem(n,JSON.stringify(i))})(n,s))},this.handleFontSizeTouchStart=()=>{document.body.style.overflow="hidden"},this.handleFontSizeTouchEnd=()=>{document.body.style.overflow=""},this.handleLetterSpacingChange=t=>{if(!(t.target instanceof HTMLInputElement))return;const{letterSpacing:e,userId:n}=this.$state,i=+t.target.value;t.target.setAttribute("aria-valuetext",`Letter Space ${i} Selected`),e!==i&&(s?.(i),((t,e)=>{if(!t)return;const n=`${t}-setting`,i={...S(t),letterSpacing:e};localStorage.setItem(n,JSON.stringify(i))})(n,i))}}setEvent(){if(!this.$node)return;const t=o(this.$node)("#font-size");t?.addEventListener("input",this.handleFontSizeChange),t?.addEventListener("touchstart",this.handleFontSizeTouchStart),t?.addEventListener("touchend",this.handleFontSizeTouchEnd);const e=o(this.$node)("#letter-space");e?.addEventListener("input",this.handleLetterSpacingChange),e?.addEventListener("touchstart",this.handleFontSizeTouchStart),e?.addEventListener("touchend",this.handleFontSizeTouchEnd);const n=o(this.$node)("#tool-toggle-button"),i=o(this.$node)(".tools-container");n?.addEventListener("click",(t=>{const e=document.getElementById("additional-scroll-area");t.stopImmediatePropagation(),i?.classList.contains("hide")?(i.classList.remove("hide"),n.classList.remove("rotate"),n.setAttribute("aria-expanded","true"),e&&(e.style.height=`${i?.clientHeight}px`)):(i?.classList.add("hide"),n?.classList.add("rotate"),n.setAttribute("aria-expanded","false"),e&&(e.style.height="0px"))}));const s=o(this.$node)("#theme-selector"),r=o(this.$node)(".tools"),a=document.getElementById("reading-text");s?.addEventListener("click",(t=>{t.preventDefault();const e=t.target;s?.childNodes.forEach((t=>{t instanceof HTMLButtonElement&&t.classList.remove("selected")})),e.classList.contains("default")?(d(r,a),e.classList.add("selected"),b(this.$state.userId,"default")):e.classList.contains("sepia")?(h(r,a),e.classList.add("selected"),b(this.$state.userId,"sepia")):e.classList.contains("dark")&&(u(r,a),e.classList.add("selected"),b(this.$state.userId,"dark"))}))}afterRender(){if(!this.$node)return;const{fontSize:t,maxLevel:e,letterSpacing:n,userId:i}=this.$state,s=o(this.$node)(".dotContainer");s&&(s.innerHTML=v(e)),c("font-size",t,e,this.$node),c("letter-space",n,e,this.$node),null!==i&&!this.isLocalStorageLoaded&&this.loadLocalstorageSettings(i)}template(){if(!this.isInit)return"";const{fontSize:t,maxLevel:e,letterSpacing:n}=this.$state;return`\n      <div class="tools">\n        \n    <button id="tool-toggle-button" aria-expanded=true class="tool-toggle-button" aria-label="Toggle Button for Toolbar" title="Toggle Button for Toolbar">\n      <svg width="24" height="25" viewBox="0 0 24 25" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M6.60156 10.3356C6.60156 10.5756 6.66156 10.8156 6.84156 10.9956L11.5816 15.7356C11.7616 15.8556 11.9416 15.9756 12.1816 15.9756C12.4216 15.9756 12.6616 15.8556 12.8416 15.7356L17.5816 10.9956C17.9416 10.6356 17.9416 10.0956 17.5816 9.73559C17.2216 9.37559 16.6816 9.37559 16.3216 9.73559L12.1816 13.8156L8.10156 9.73559C7.74156 9.37559 7.20156 9.37559 6.84156 9.73559C6.66156 9.91559 6.60156 10.1556 6.60156 10.3356Z" fill="white"/></svg>\n    </button>\n  \n        <div class="tools-container">\n          \n    <div class="tool-container">\n      <label class="tool-label" for="theme-selector">Background Color</label>\n      <div class="color-palette-container" id="theme-selector">\n        <button role="radio" id="color-palette default" aria-checked="false" class="color-palette default" aria-label="Default Theme" title="Default Theme">Aa</button>\n        <button role="radio" id="color-palette sepia" aria-checked="false" class="color-palette sepia" aria-label="Sepia Theme" title="Sepia Theme">Aa</button>\n        <button role="radio" id="color-palette dark" aria-checked="false" class="color-palette dark" aria-label="Dark Theme" title="Dark Theme">Aa</button>\n      </div>\n    </div>\n  \n          ${function(t,e){return`\n    <div class="tool-container" aria-label="Font Size Controller" title="Font Size Controller">\n      <div class="tool-label">Font Size</div>\n      <div id="font-controller" class="font-size">\n          <div class="font-size-container slidecontainer">\n              <div class="dotContainer">\n                ${v(e)}\n              </div>\n              <input role="slider" tabindex="0" aria-valuetext="Font Size ${t} Selected" aria-labelledby="font-size-label" type="range" min="1" max="${e}" id="font-size" step="1">\n          </div>\n      </div>\n    </div>\n  `}(t,e)}\n          ${function(t,e){return`\n    <div class="tool-container" aria-label="Letter Space Controller" title="Letter Space Controller">\n      <div class="tool-label">Letter Spacing</div>\n      <div id="font-controller" class="letter-space">\n          <div class="letter-space-container slidecontainer">\n              <div class="dotContainer">\n                ${v(e)}\n              </div>\n              <input role="slider" tabindex="0" aria-valuetext="Letter Space ${t} Selected" aria-labelledby="letter-space-label" type="range" min="1" max="${e}" id="letter-space" step="1">\n          </div>\n      </div>\n    </div>\n  `}(n,e)}\n        </div>\n      </div>\n    `}clearEvent(){if(!this.$node)return;const t=o(this.$node)("#font-size");t?.removeEventListener("input",this.handleFontSizeChange),t?.removeEventListener("touchstart",this.handleFontSizeTouchStart),t?.removeEventListener("touchend",this.handleFontSizeTouchEnd);const e=o(this.$node)("#letter-space");e?.removeEventListener("input",this.handleLetterSpacingChange),e?.removeEventListener("touchstart",this.handleFontSizeTouchStart),e?.removeEventListener("touchend",this.handleFontSizeTouchEnd)}afterMount(){this.isInit=!1}loadLocalstorageSettings(t){const{fontSize:e,letterSpacing:n,theme:i}=S(t),s=document.getElementById("reading-text");e&&this.onFontSizeChange?.(e),n&&this.onLetterSpacingChange?.(n),i&&this.$node&&function(t,e,n){"default"===t?d(e,n):"sepia"===t?h(e,n):"dark"===t&&u(e,n)}(i,o(this.$node)(".tools"),s),this.isLocalStorageLoaded=!0}};function v(t){return`${new Array(t).fill("<span></span>").join("")}`}var $=n(426);const m=n(660).Z,L=document.querySelector("#app");L&&new class extends e{constructor(t){let{$target:e}=t;super({$target:e,initialState:{text:"Loading...",fontSize:4,title:"RTA Viewer",isMobile:l(),letterSpacing:2,userId:null}});const{text:n,fontSize:s,isMobile:r,letterSpacing:o,userId:c}=this.$state;this.$children.set("readingText",new a({$target:this.$target,initialState:{text:n,fontSize:s,letterSpacing:o}})),this.$children.set("closeButton",new i({$target:this.$target})),this.$children.set("toolbar",new p({$target:this.$target,initialState:{fontSize:s,letterSpacing:o,userId:c,maxLevel:r?5:7},onFontSizeChange:t=>this.setState({fontSize:t}),onLetterSpacingChange:t=>this.setState({letterSpacing:t})})),this.subscribeState({targetState:"fontSize",subscriber:"readingText",subscriberStateKey:"fontSize"}),this.subscribeState({targetState:"letterSpacing",subscriber:"readingText",subscriberStateKey:"letterSpacing"}),this.subscribeState({targetState:"text",subscriber:"readingText",subscriberStateKey:"text"}),this.subscribeState({targetState:"isMobile",subscriber:"readingText",subscriberStateKey:"isMobile"}),this.subscribeState({targetState:"fontSize",subscriber:"toolbar",subscriberStateKey:"fontSize"}),this.subscribeState({targetState:"letterSpacing",subscriber:"toolbar",subscriberStateKey:"letterSpacing"}),this.subscribeState({targetState:"userId",subscriber:"toolbar",subscriberStateKey:"userId"}),this.subscribeState({targetState:"isMobile",subscriber:"toolbar",subscriberStateKey:"maxLevel",compute:t=>t?5:7}),this.handleResizeDebounce=((t,e)=>{let n=null;return function(){for(var e=arguments.length,i=new Array(e),s=0;s<e;s++)i[s]=arguments[s];n&&window.clearTimeout(n),n=window.setTimeout((()=>t(...i)),20)}})((()=>{this.setState({isMobile:l(),fontSize:l()?Math.min(this.$state.fontSize,5):this.$state.fontSize})}))}afterRender(){const{title:t}=this.$state;t&&document.title!==t&&(document.title=t)}afterMount(){const t=new URLSearchParams(window.location.search).get($.ei);this.setState({userId:t||null}),(async()=>{const t=$.wb.OFFLINE,e=new URLSearchParams(window.location.search).get(t),n=e?decodeURIComponent(e):e;if(n){const{title:e,content:i}=await m.getContent(n);if(e===$.RZ.FETCH_TITLE||i===$.RZ.FETCH_CONTENT){const e=function(t){const e=new RegExp(`(?:\\?${t}=)(.+)`,"g"),n=window.location.search.match(e)?.map((e=>e.replace(`?${t}=`,"")));return n&&n.length?n[0]:""}(t),{title:n,content:i}=await m.getContent(e||"");return void this.setState({title:n,text:i})}this.setState({title:e,text:i})}else this.setState({text:$.RZ.FETCH_CONTENT})})()}setEvent(){window.addEventListener("resize",this.handleResizeDebounce)}clearEvent(){window.removeEventListener("resize",this.handleResizeDebounce)}}({$target:L}).mount()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,